/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.example.Gui.Analit;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author ivan
 */
public class JPanelPaint extends javax.swing.JPanel {

    /**
     * Creates new form JPanelPaint
     */
    public JPanelPaint() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 605, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 475, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        paintGis();
    }//GEN-LAST:event_formComponentShown

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        paintGis();
    }//GEN-LAST:event_formComponentResized

   

    
    
    
     /*public void repaintall()
     {
         paintGis();
     }*/
    
    
    public void paintAll1(ArrayList<Integer> d)
    {
        
        data = d;
        paintGis();
    }

       
    
    ArrayList<Integer> data;
    
    List<String> ls;
    
    public void setDataName(List<String> ls1)
    {
        ls = ls1;
    }
    
    
    /**
     * Нарисовать
     *  1 - значение занятого
     *  2 - значение приращения
     *  3 - максимальное значение
     */
    private void paintGis()
    {
  
        if(data == null)
            return;
        if(data.isEmpty())
            return;
        
        
        
        Graphics g = getGraphics();                 
        
        Graphics2D g2 = (Graphics2D) g;        
        
        
        
        try
        {
            g2.clearRect(0, 0, getWidth(), getHeight());            
        }catch(java.lang.NullPointerException e)
        {
            return;
        }
        

        /*g2.setFont(new Font("Arial",Font.BOLD,24));
        g2.drawString("A",300,250);
        g2.rotate(45 * Math.PI/180);
        g2.drawString("B",300,250);*/
        
        
        int maxNum = 0;
        int tn;
        
        for (int i = 0; i < data.size(); i=i+3)
        {
            tn = data.get(i) + data.get(i+1);
            if(maxNum<tn)
                maxNum = tn;
            
            tn = data.get(i+2);
            if(maxNum<tn)
                maxNum = tn;
        }
        
    
        //System.out.println("MAX = " + maxNum);
        
        String zn;        
        //int poloska_w = (getWidth()-180) / 12;              
        int poloska_w = (getWidth()-100) / 12;              
        double poloska_h;
        double poloska_h1;
        
        
        //System.out.println("geth = " + getHeight());
        //System.out.println("getw = " + getWidth());
        
        //System.out.println("pol_w = " + poloska_w);
        
        //int poloska_w = (getWidth() / 12) -50 ; // Считаем ширину одной полоски (каждый раз, т.к. размеры окошка могут меняться)        
        for (int i = 0; i < data.size(); i=i+3) 
        {
            // первое значение
            //poloska_h =  ((getHeight()-40)/maxNum)*data.get(i);//  (data.get(i) * getHeight() / maxNum) - 50 ; // считаем высоту полоски
            
            poloska_h =  ((getHeight()-40)/Double.valueOf(maxNum));
            poloska_h = poloska_h * data.get(i);
            
            //System.out.println("pol_h = " + poloska_h);
            
            
                
            g2.setColor(Color.red);                
        
            // 1  g2.fillRect((i/3)*(30+2*poloska_w)+10, (int)(getHeight() - (poloska_h+40)), poloska_w, (int)poloska_h);
            
            g2.fillRect((i/3)*(10+2*poloska_w)+3, (int)(getHeight() - (poloska_h+40)), poloska_w, (int)poloska_h);
            
            
            g2.setColor(Color.BLACK);                
            zn = String.valueOf(data.get(i));     
            //g2.drawString(zn,(i/3)*(30+2*poloska_w)+10, (int)(getHeight() - (poloska_h+40)+15));
            
            
            //приращение
            
            //poloska_h1 =  ((getHeight()-40)/maxNum)*data.get(i+1);
            
            poloska_h1 =  ((getHeight()-40)/Double.valueOf(maxNum));
            poloska_h1 = poloska_h1 * data.get(i+1);
            
            
            
            
            g2.setColor(Color.GREEN);
            
            //  1  g2.fillRect((i/3)*(30+2*poloska_w)+10, (int)(getHeight() - (poloska_h+40) - poloska_h1) , poloska_w, (int)poloska_h1);
            g2.fillRect((i/3)*(10+2*poloska_w)+3, (int)(getHeight() - (poloska_h+40) - poloska_h1) , poloska_w, (int)poloska_h1);
            
            g2.setColor(Color.BLACK);                
            zn = String.valueOf(data.get(i+1));     
            //g2.drawString(zn,(i/3)*(30+2*poloska_w)+10, (int)(getHeight() - (poloska_h+40)- poloska_h1+15));           
           
            
            //максимум
            
            //poloska_h =  ((getHeight()-40)/maxNum)*data.get(i+2);//  (data.get(i) * getHeight() / maxNum) - 50 ; // считаем высоту полоски
            
            poloska_h =  ((getHeight()-40)/Double.valueOf(maxNum));
            poloska_h = poloska_h * data.get(i+2);
                
            g2.setColor(Color.BLUE);                
        
            //  1   g2.fillRect((i/3)*(30+2*poloska_w)+20+poloska_w, (int)(getHeight() - (poloska_h+40)), poloska_w, (int) poloska_h);
            g2.fillRect((i/3)*(10+2*poloska_w)+6+poloska_w, (int)(getHeight() - (poloska_h+40)), poloska_w, (int) poloska_h);
            
            g2.setColor(Color.BLACK);                
            //zn = String.valueOf(data.get(i+2));     
            zn = ls.get(i/3);
            
            //g2.drawString(zn,(i/3)*(30+2*poloska_w)+20+poloska_w, (int)(getHeight() - (poloska_h+40)+15));           
            //g2.drawString(zn,(i/3)*(10+2*poloska_w)+6+poloska_w, (int)(getHeight() - (poloska_h+40)+15));           
            
            g2.drawString(zn,(i/3)*(10+2*poloska_w)+6+poloska_w, (int)(getHeight() - 20));           
            
            
           
                
        }
        
        
        
        
    }
    
    

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
